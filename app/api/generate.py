from typing import Optional
from fastapi import APIRouter, HTTPException, BackgroundTasks
from fastapi.responses import StreamingResponse
from pydantic import BaseModel
import io
import logging
import uuid
from datetime import datetime

from app.api.presentation_templates import templates_store
from app.core.embeddings import document_index
from app.core.llm_generator import content_generator
from app.core.pptx_builder import PresentationBuilder

router = APIRouter()
logger = logging.getLogger(__name__)

generation_status = {}


class GenerationRequest(BaseModel):
    audience: str = "–∏–Ω–≤–µ—Å—Ç–æ—Ä—ã"
    presentation_type: str = "standard"
    template_id: Optional[str] = None


class GenerationResponse(BaseModel):
    job_id: str
    status: str
    message: str


def _get_slides_structure():
    return [
        {"type": "title", "title": "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è"},
        {"type": "problem", "title": "–ü—Ä–æ–±–ª–µ–º–∞"},
        {"type": "solution", "title": "–†–µ—à–µ–Ω–∏–µ"},
        {"type": "market", "title": "–†—ã–Ω–æ–∫ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"},
        {"type": "finance", "title": "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏"},
        {"type": "team", "title": "–ö–æ–º–∞–Ω–¥–∞"},
        {"type": "summary", "title": "–†–µ–∑—é–º–µ"}
    ]


def _search_relevant_context(slide_type: str, title: str) -> str:
    search_queries = {
        "title": "–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç –ø—Ä–æ–¥—É–∫—Ç",
        "problem": "–ø—Ä–æ–±–ª–µ–º–∞ –∑–∞–¥–∞—á–∞ –≤—ã–∑–æ–≤",
        "solution": "—Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è",
        "market": "—Ä—ã–Ω–æ–∫ –æ–±—ä–µ–º –∞—É–¥–∏—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–¥—ã",
        "finance": "—Ñ–∏–Ω–∞–Ω—Å—ã –≤—ã—Ä—É—á–∫–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
        "team": "–∫–æ–º–∞–Ω–¥–∞ –æ–ø—ã—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã",
        "summary": "—Ä–µ–∑—é–º–µ –≤—ã–≤–æ–¥—ã –∏—Ç–æ–≥–∏"
    }

    query = search_queries.get(slide_type, title)
    results = document_index.search(query, k=2)  # –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

    if results:
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        context_parts = []
        for content, content_type, source in results[:2]:
            if content and len(content) > 10:
                context_parts.append(content[:150])

        if context_parts:
            return " | ".join(context_parts)

    return "–ü—Ä–æ–µ–∫—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ"


def _generate_presentation_task(job_id: str, request: GenerationRequest):
    try:
        logger.info(f"üöÄ –ù–∞—á–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è job {job_id}")

        generation_status[job_id].update({"status": "processing", "progress": 10})

        # –°–æ–∑–¥–∞–µ–º –±–∏–ª–¥–µ—Ä
        if request.template_id and request.template_id in templates_store:
            template_info = templates_store[request.template_id]
            template_path = template_info["file_path"]
            builder = PresentationBuilder(template_path)
            logger.info(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à–∞–±–ª–æ–Ω: {template_info['name']}")
        else:
            builder = PresentationBuilder()
            logger.info("üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω")

        slides_structure = _get_slides_structure()
        generation_status[job_id]["slides_generated"] = []

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–ª–∞–π–¥
        for i, slide_spec in enumerate(slides_structure):
            progress = 10 + int((i / len(slides_structure)) * 80)
            generation_status[job_id]["progress"] = progress

            slide_type = slide_spec["type"]
            slide_title = slide_spec["title"]
            context = _search_relevant_context(slide_type, slide_title)

            logger.info(f"üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–∞–π–¥–∞ {i + 1}/{len(slides_structure)}: {slide_title}")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            generation_result = content_generator.generate_slide_content(
                slide_type, context, request.audience
            )

            # –°–æ–∑–¥–∞–µ–º —Å–ª–∞–π–¥
            builder.add_slide(slide_type, slide_title, generation_result["content"])
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–ª–∞–π–¥: {slide_title}")

            generation_status[job_id]["slides_generated"].append({
                "slide_type": slide_type,
                "title": slide_title,
                "content": generation_result["content"],
                "status": "success"
            })

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        generation_status[job_id]["progress"] = 95
        presentation_bytes = builder.save_to_bytes()

        generation_status[job_id].update({
            "status": "completed",
            "progress": 100,
            "presentation_data": presentation_bytes.getvalue(),
            "slides_count": builder.get_slide_count(),
            "presentation_filename": f"presentation_{job_id[:8]}.pptx"
        })

        logger.info(f"üéâ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞! –°–ª–∞–π–¥–æ–≤: {builder.get_slide_count()}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        generation_status[job_id].update({
            "status": "failed",
            "error_message": str(e)
        })


@router.post("/presentation", response_model=GenerationResponse)
async def generate_presentation(request: GenerationRequest, background_tasks: BackgroundTasks):
    if not document_index.documents:
        raise HTTPException(status_code=400, detail="–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")

    job_id = str(uuid.uuid4())
    now = datetime.now().isoformat()

    generation_status[job_id] = {
        "job_id": job_id,
        "status": "pending",
        "progress": 0,
        "slides_generated": [],
        "created_at": now,
        "updated_at": now,
        "presentation_data": None
    }

    background_tasks.add_task(_generate_presentation_task, job_id, request)

    return GenerationResponse(
        job_id=job_id,
        status="pending",
        message="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞"
    )


@router.get("/download/{job_id}")
async def download_presentation(job_id: str):
    if job_id not in generation_status:
        raise HTTPException(status_code=404, detail="Job not found")

    status_data = generation_status[job_id]

    if status_data["status"] != "completed":
        raise HTTPException(status_code=400, detail="Presentation not ready")

    presentation_bytes = io.BytesIO(status_data["presentation_data"])
    filename = status_data["presentation_filename"]

    return StreamingResponse(
        presentation_bytes,
        media_type="application/vnd.openxmlformats-officedocument.presentationml.presentation",
        headers={"Content-Disposition": f"attachment; filename={filename}"}
    )


@router.get("/status/{job_id}")
async def get_generation_status(job_id: str):
    if job_id not in generation_status:
        raise HTTPException(status_code=404, detail="Job not found")

    status_data = generation_status[job_id]

    return {
        "job_id": job_id,
        "status": status_data["status"],
        "progress": status_data["progress"],
        "slides_count": status_data.get("slides_count", 0)
    }

